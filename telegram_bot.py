"""
Premium IPTV - Telegram Support Bot
Railway-optimiert mit Environment Variables
"""

import os
from anthropic import Anthropic
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, 
    filters, ContextTypes
)

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ANTHROPIC_API_KEY = os.getenv("ANTHROPIC_API_KEY")
ADMIN_CHAT_IDS = [int(os.getenv("ADMIN_CHAT_IDS", "0"))]

# Anthropic Client initialisieren
anthropic = Anthropic(api_key=ANTHROPIC_API_KEY)

# Wissensdatenbank (FAQ)
KNOWLEDGE_BASE = """
Premium IPTV - Support Wissensdatenbank

BESTELLUNG & PREISE:
Q: Was kostet Premium IPTV?
A: Unser Jahresabonnement kostet 119,99‚Ç¨ f√ºr volle 12 Monate. Das sind nur 10‚Ç¨ pro Monat!

Q: Welche Zahlungsmethoden akzeptiert ihr?
A: Wir akzeptieren Kreditkarte, PayPal, Google Pay und Apple Pay √ºber unsere sichere Stripe-Zahlung.

Q: Gibt es eine Testversion?
A: Ja! Du kannst Premium IPTV 24 Stunden lang kostenlos testen. Nutze den Befehl /test um eine anzufordern.

EINRICHTUNG & TECHNIK:
Q: Wie richte ich IPTV ein?
A: 1) Lade eine IPTV-App herunter (z.B. IPTV Smarters Pro)
   2) √ñffne die App und w√§hle "Login with Xtream Codes API"
   3) Gib die Zugangsdaten ein, die du erhalten hast
   4) Fertig! Alle Kan√§le werden automatisch geladen

Q: Welche App soll ich nutzen?
A: Empfohlene Apps: IPTV Smarters Pro, TiviMate, GSE Smart IPTV, VLC Media Player

Q: Auf welchen Ger√§ten funktioniert es?
A: Smart TV, Fire TV Stick, Apple TV, Android TV, iOS, Android, Windows, Mac, Linux.

KAN√ÑLE & INHALTE:
Q: Wie viele Kan√§le gibt es?
A: √úber 10.000 Live-TV-Kan√§le aus aller Welt in HD und 4K-Qualit√§t!

Q: Welche deutschen Kan√§le sind verf√ºgbar?
A: Alle deutschen Hauptsender: ARD, ZDF, RTL, ProSieben, Sat.1, VOX, Sport1, Sky Sport, DAZN, und viele mehr!
"""


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start Command"""
    await update.message.reply_text(
        "üëã *Willkommen beim Premium IPTV Support!*\n\n"
        "Ich bin dein KI-Support-Agent und helfe dir gerne weiter.\n\n"
        "üéØ *Was kann ich f√ºr dich tun?*\n"
        "‚Ä¢ Fragen zur Bestellung & Bezahlung\n"
        "‚Ä¢ Hilfe bei der Einrichtung\n"
        "‚Ä¢ Technischer Support\n"
        "‚Ä¢ Informationen zu Features & Kan√§len\n\n"
        "üí° *Schnellbefehle:*\n"
        "/start - Diese Nachricht\n"
        "/test - 24h Testversion anfragen\n"
        "/hilfe - H√§ufige Fragen\n\n"
        "Stelle mir einfach deine Frage! üòä",
        parse_mode='Markdown'
    )


async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Test Command"""
    user_id = update.effective_user.id
    user_name = update.effective_user.username or update.effective_user.first_name
    
    await update.message.reply_text(
        "üß™ *24-Stunden-Testversion angefordert!*\n\n"
        "Ein Admin wird dir gleich deine Testdaten zusenden.\n\n"
        "Viel Spa√ü beim Testen! üçø",
        parse_mode='Markdown'
    )
    
    # Benachrichtige Admins
    for admin_id in ADMIN_CHAT_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=f"üÜï *Neue Testanfrage*\n\nUser: @{user_name}\nUser ID: {user_id}",
                parse_mode='Markdown'
            )
        except:
            pass


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Hilfe Command"""
    await update.message.reply_text(
        "‚ùì *H√§ufig gestellte Fragen*\n\n"
        "üéØ *Bestellung:*\n"
        "‚Ä¢ Was kostet es?\n"
        "‚Ä¢ Welche Zahlungsmethoden?\n\n"
        "üîß *Einrichtung:*\n"
        "‚Ä¢ Wie richte ich IPTV ein?\n"
        "‚Ä¢ Welche App soll ich nutzen?\n\n"
        "üì∫ *Kan√§le:*\n"
        "‚Ä¢ Wie viele Kan√§le?\n"
        "‚Ä¢ Deutsche Kan√§le?\n\n"
        "üí¨ Stelle mir einfach deine Frage!",
        parse_mode='Markdown'
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler f√ºr alle Text-Nachrichten - KI-Antworten"""
    user_message = update.message.text
    user_name = update.effective_user.first_name
    
    print(f"[{user_name}] {user_message}")
    
    try:
        # Sende Typing-Anzeige
        await update.message.chat.send_action(action="typing")
        
        # Claude API
        response = anthropic.messages.create(
            model="claude-sonnet-4-20250514",
            max_tokens=800,
            system=f"""Du bist ein freundlicher Support-Agent f√ºr Premium IPTV.

Nutze diese Wissensdatenbank:
{KNOWLEDGE_BASE}

Regeln:
- Sei freundlich und hilfsbereit
- Antworte auf Deutsch
- Kurz und pr√§zise (max. 200 W√∂rter)
- Nutze Emojis
- Der User hei√üt: {user_name}""",
            messages=[{"role": "user", "content": user_message}]
        )
        
        bot_reply = response.content[0].text
        print(f"[BOT] {bot_reply[:100]}...")
        
        await update.message.reply_text(bot_reply)
        
    except Exception as e:
        print(f"FEHLER: {e}")
        await update.message.reply_text(
            "üòï Entschuldigung, da ist etwas schiefgelaufen.\n"
            "Bitte versuche es erneut oder nutze /hilfe"
        )


def main():
    """Bot starten"""
    
    # Pr√ºfe Environment Variables
    if not TELEGRAM_BOT_TOKEN or not ANTHROPIC_API_KEY:
        print("‚ùå ERROR: Environment Variables nicht gesetzt!")
        print("TELEGRAM_BOT_TOKEN:", "‚úì" if TELEGRAM_BOT_TOKEN else "‚úó")
        print("ANTHROPIC_API_KEY:", "‚úì" if ANTHROPIC_API_KEY else "‚úó")
        return
    
    print("üîë Environment Variables geladen:")
    print(f"  Bot Token: {TELEGRAM_BOT_TOKEN[:20]}...")
    print(f"  API Key: {ANTHROPIC_API_KEY[:20]}...")
    print(f"  Admin IDs: {ADMIN_CHAT_IDS}")
    
    # Application erstellen
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # Handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("test", test_command))
    application.add_handler(CommandHandler("hilfe", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print("ü§ñ Premium IPTV Support Bot gestartet...")
    print("üöÄ Bot l√§uft auf Railway!")
    print("Bot ist online und wartet auf Nachrichten!")
    
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
